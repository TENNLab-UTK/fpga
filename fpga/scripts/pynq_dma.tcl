#*****************************************************************************************
# Vivado (TM) v2024.1 (64-bit)
#
# pynq_dma.tcl: Tcl script for re-creating project 'pynq_dma'
#
# Generated by Vivado on Thu Aug 29 13:32:42 EDT 2024
# IP Build 5075265 on Wed May 22 21:45:21 MDT 2024
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (pynq_dma.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#
# 3. The following remote source files that were added to the original project:-
#
#    "fpga/fpga/rtl/axis_if.sv"
#    "fpga/fpga/rtl/axis_packetize.sv"
#    SysteVerilog network file that is auto-generated
#    "fpga/fpga/rtl/macros.svh"
#    "fpga/fpga/rtl/stream_source.sv"
#    "fpga/fpga/rtl/stream_sink.sv"
#    "fpga/fpga/rtl/axis_processor.sv"
#    "fpga/fpga/rtl/axis_processor_tlast.sv"
#    "fpga/fpga/rtl/axis_processor_tlast_v_sv_adapter.sv"
#    "fpga/fpga/rtl/risp_neuron.sv"
#    "fpga/fpga/rtl/risp_synapse.sv"
#    "fpga/fpga/rtl/axis_processor_tlast_top.v"
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir net_sv_path } {
  set status true
  set files [list \
 "[file normalize "$origin_dir/../rtl/axis_if.sv"]"\
 "[file normalize "$origin_dir/../rtl/axis_packetize.sv"]"\
 "[file normalize "$net_sv_path"]"\
 "[file normalize "$origin_dir/../rtl/macros.svh"]"\
 "[file normalize "$origin_dir/../rtl/stream_source.sv"]"\
 "[file normalize "$origin_dir/../rtl/stream_sink.sv"]"\
 "[file normalize "$origin_dir/../rtl/axis_processor.sv"]"\
 "[file normalize "$origin_dir/../rtl/axis_processor_tlast.sv"]"\
 "[file normalize "$origin_dir/../rtl/axis_processor_tlast_v_sv_adapter.sv"]"\
 "[file normalize "$origin_dir/../rtl/risp_neuron.sv"]"\
 "[file normalize "$origin_dir/../rtl/risp_synapse.sv"]"\
 "[file normalize "$origin_dir/../rtl/axis_processor_tlast_top.v"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find remote file $ifile "
      set status false
    }
  }

  return $status
}

# Set the reference directory to where the script is
set origin_dir [file dirname [info script]]

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "pynq_dma"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "pynq_dma.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--net_sv_path <path>\]"
  puts "$script_file -tclargs \[--project_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--inp_pkt_width_bits <int>\]"
  puts "$script_file -tclargs \[--out_pkt_width_bits <int>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--net_sv_path <path>\]  REQUIRED. Path to network SystemVerilog file"
  puts "                        that was auto-generated.\n"
  puts "\[--project_dir <path>\]  REQUIRED. Path to directory where Vivado project"
  puts "                        should be created.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--inp_pkt_width_bits <int>\] Number of bits in one neuro FPGA input"
  puts "                       packet. Default is 16 bits.\n"
  puts "\[--out_pkt_width_bits <int>\] Number of bits in one neuro FPGA output"
  puts "                       packet. Default is 16 bits.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--net_sv_path"   { incr i; set net_sv_path [lindex $::argv $i] }
      "--project_dir"   { incr i; set project_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--inp_pkt_width_bits"  { incr i; set inp_pkt_width_bits [lindex $::argv $i] }
      "--out_pkt_width_bits"  { incr i; set out_pkt_width_bits [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

if { [info exists net_sv_path] == 0 } {
  puts "ERROR: Must specify --net_sv_path with the path to a valid network SystemVerilog file that was auto-generated.\n"
  return 1
}

if { [file exists $net_sv_path] == 0 } {
  puts "ERROR: Given --net_sv_path, $net_sv_path, is not a path to a valid file.\n"
  return 1
}

if { [info exists project_dir] == 0 } {
  puts "ERROR: Must specify --project_dir with the path to a valid directory.\n"
  return 1
}

if { [file exists $project_dir] == 0 || [file isdirectory $project_dir] == 0 } {
  puts "ERROR: Given --project_dir, $project_dir, is not a path to a valid directory.\n"
  return 1
}

# Check for paths and files needed for project creation
set validate_required 1
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir $net_sv_path] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} $project_dir -part xc7z020clg400-1

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Reconstruct message rules
# None

# Set project properties
set obj [current_project]
set_property -name "board_part" -value "www.digilentinc.com:pynq-z1:part0:1.0" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "pynq-z1" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "sim_compile_state" -value "1" -objects $obj
set_property -name "webtalk.activehdl_export_sim" -value "9" -objects $obj
set_property -name "webtalk.modelsim_export_sim" -value "9" -objects $obj
set_property -name "webtalk.questa_export_sim" -value "9" -objects $obj
set_property -name "webtalk.riviera_export_sim" -value "9" -objects $obj
set_property -name "webtalk.vcs_export_sim" -value "9" -objects $obj
set_property -name "webtalk.xsim_export_sim" -value "9" -objects $obj
set_property -name "webtalk.xsim_launch_sim" -value "121" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
set files [list \
 [file normalize "${origin_dir}/../rtl/axis_if.sv"] \
 [file normalize "${origin_dir}/../rtl/axis_packetize.sv"] \
 [file normalize "${net_sv_path}"] \
 [file normalize "${origin_dir}/../rtl/macros.svh"] \
 [file normalize "${origin_dir}/../rtl/stream_source.sv"] \
 [file normalize "${origin_dir}/../rtl/stream_sink.sv"] \
 [file normalize "${origin_dir}/../rtl/axis_processor.sv"] \
 [file normalize "${origin_dir}/../rtl/axis_processor_tlast.sv"] \
 [file normalize "${origin_dir}/../rtl/axis_processor_tlast_v_sv_adapter.sv"] \
 [file normalize "${origin_dir}/../rtl/risp_neuron.sv"] \
 [file normalize "${origin_dir}/../rtl/risp_synapse.sv"] \
 [file normalize "${origin_dir}/../rtl/axis_processor_tlast_top.v"] \
]
add_files -norecurse -fileset $obj $files

# Set 'sources_1' fileset file properties for remote files
set file "$origin_dir/../rtl/axis_if.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../rtl/axis_packetize.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$net_sv_path"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../rtl/macros.svh"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "Verilog Header" -objects $file_obj

set file "$origin_dir/../rtl/stream_source.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../rtl/stream_sink.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../rtl/axis_processor.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../rtl/axis_processor_tlast.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../rtl/axis_processor_tlast_v_sv_adapter.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../rtl/risp_neuron.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

set file "$origin_dir/../rtl/risp_synapse.sv"
set file [file normalize $file]
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "SystemVerilog" -objects $file_obj

# Create block design
set argv [list "--inp_pkt_width_bits" "$inp_pkt_width_bits" "--out_pkt_width_bits" "$out_pkt_width_bits"]
set argc [llength $argv]
set argv0 $origin_dir/pynq_dma_bd.tcl
source $argv0

# Generate the block design Verilog wrapper that is set as top
set design_name [get_bd_designs]
make_wrapper -files [get_files $design_name.bd] -top -import
update_compile_order -fileset sources_1
set_property top pynq_dma_wrapper [current_fileset]
update_compile_order -fileset sources_1

# Run synthesis, implementation, and generate bitstream
launch_runs impl_1 -to_step write_bitstream -jobs 8
wait_on_run impl_1

# Open implementation and report utilization
open_run impl_1
report_utilization -file utilization.txt
